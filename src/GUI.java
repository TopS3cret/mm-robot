
import Strukture.Ovira;
import Strukture.Tocka;
import Strukture.Trikotnik;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Polygon;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import javax.swing.JPanel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author egral
 */
public class GUI extends javax.swing.JFrame {
    RobotPanel robotPanel;
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        robotPanel = (RobotPanel)drawPanel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        lblStatus = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        drawPanel = new RobotPanel();
        jPanel2 = new javax.swing.JPanel();
        btnAddObject = new javax.swing.JButton();
        btnTriangulate = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblStatus.setText("Status: OK");
        getContentPane().add(lblStatus, java.awt.BorderLayout.SOUTH);

        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 359, Short.MAX_VALUE)
        );

        btnAddObject.setText("Dodaj objekt");
        btnAddObject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddObjectActionPerformed(evt);
            }
        });

        btnTriangulate.setText("Triangulacija");
        btnTriangulate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTriangulateActionPerformed(evt);
            }
        });

        btnClear.setText("Počisti");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddObject, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
                    .addComponent(btnTriangulate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addComponent(btnClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnAddObject)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTriangulate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnClear)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTriangulateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTriangulateActionPerformed
        robotPanel.triangulate();
    }//GEN-LAST:event_btnTriangulateActionPerformed

    private void btnAddObjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddObjectActionPerformed
        if(robotPanel.addingObject){
            robotPanel.setAddingObject(false);
            btnAddObject.setText("Dodaj objekt");
        }else{
            robotPanel.setAddingObject(true);
            btnAddObject.setText("Zaključi objekt");
        }
    }//GEN-LAST:event_btnAddObjectActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        robotPanel.clear();
    }//GEN-LAST:event_btnClearActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI().setVisible(true);
            }
        });
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddObject;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnTriangulate;
    private javax.swing.JPanel drawPanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblStatus;
    // End of variables declaration//GEN-END:variables
}

class RobotPanel extends JPanel implements MouseListener{
    boolean addingObject = false;
    ArrayList<Tocka> addedObject;
    ArrayList<Ovira> ovire;
    
    Trikotnik[] trikotniki;
    
    public RobotPanel(){
        addedObject = new ArrayList<>();
        ovire = new ArrayList<Ovira>();
        trikotniki = new Trikotnik[0];
        super.addMouseListener(this);
    }
    
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g); 
        clearScreen(g);
        
        paintOvire(g);
        paintTrikotniki(g);
        paintAddedObject(g);
        
    }
    
    void paintTrikotniki(Graphics g){
        for(int n=0; n<trikotniki.length; n++){
            
            Trikotnik tr = trikotniki[n];
            Polygon p = new Polygon();
            for(int i=0; i<tr.ogljisca.length; i++){
                Tocka t = tr.ogljisca[i];
                p.addPoint((int)t.x, (int)t.y);
            }
            //g.setColor(Color.blue);
            //g.fillPolygon(p);
            g.setColor(Color.green);
            g.drawPolygon(p);
            
        }
    }
    
    void paintOvire(Graphics g){
        for(int n=0; n<ovire.size(); n++){
            
            Ovira o = ovire.get(n);
            Polygon p = new Polygon();
            for(int i=0; i<o.tocke.size(); i++){
                Tocka t = o.tocke.get(i);
                p.addPoint((int)t.x, (int)t.y);
            }
            g.setColor(Color.black);
            g.fillPolygon(p);
            g.setColor(Color.red);
            g.drawPolygon(p);
            
        }
    }
    
    void paintAddedObject(Graphics g){
        if(addingObject){
            g.setColor(Color.gray);
            Polygon p = new Polygon();
            for(int i=0; i<addedObject.size(); i++){
                Tocka t = addedObject.get(i);
                p.addPoint((int)t.x, (int)t.y);
            }
            g.drawPolygon(p);
            
            for(int i=0; i<addedObject.size(); i++){
                Tocka t = addedObject.get(i);
                g.drawOval((int)t.x-2, (int)t.y-2, 4, 4);
            }
            
        }
    }
    
    
    void clearScreen(Graphics g) {
      g.setColor(Color.white);
      g.fillRect(0, 0, this.getWidth(), this.getHeight());
   }

    @Override
    public void mouseClicked(MouseEvent e) {
        if(addingObject){
            addedObject.add(new Tocka(e.getX(), e.getY()));
        }
        this.repaint();
    }

    @Override
    public void mousePressed(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    public void setAddingObject(boolean b){
        if(this.addingObject == b)
            return;
        
        if(addingObject)
            completeObject();
        this.addingObject = b;
    }
    
    void completeObject(){
        if(addedObject.size()>=3){
            Ovira o = new Ovira();
            for(int i=0; i<addedObject.size(); i++){
                o.tocke.add(addedObject.get(i));
            }
            o.complete();
            ovire.add(o);
        }
        addedObject.clear();
        repaint();
        
    }
    
    void triangulate(){
        Tocka[] robovi = {
            new Tocka(0,0),
            new Tocka(0, this.getHeight()),
            new Tocka(this.getWidth(), this.getHeight()),
            new Tocka(this.getWidth(), 0)
        };
        Triangulacija t = new Triangulacija(robovi, ovire.toArray(new Ovira[0]));
        trikotniki = t.izracunaj();
        repaint();
    }
    
    void clear(){
        this.trikotniki = new Trikotnik[0];
        this.ovire.clear();
        this.addedObject.clear();
        this.setAddingObject(false);
        repaint();
    }
    
}
